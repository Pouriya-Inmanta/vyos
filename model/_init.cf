"""
    Vyos interface module

    :copyright: 2018 Inmanta
    :contact: code@inmanta.com
    :license: Inmanta EULA
"""

import ip

os = std::OS(family=std::linux, name="vyos", version=1.1)

entity ConfigItem:
    string config
end

entity Config extends ConfigItem, std::PurgeableResource:
    """
        VYOS config block resource

        :attr keys_only: Only compare these keys, ignore all other keys that are in the current state
        :attr ignore_keys: Ignore these keys in the current state
    """
    string device
    string node
    bool never_delete=false
    bool save=true
    bool send_event=true
    string[] keys_only=[]
    string[] ignore_keys=[]

end

index Config(device, node)

Config.credential [1] -- Credential

entity ExtraConfig extends ConfigItem:
end

implement ExtraConfig using std::none

Config.extra [0:] -- ExtraConfig

implement Config using std::none

entity Credential:
    string address
    string user
    string password
    number port
end

implement Credential using std::none

entity Host extends ip::Host:
    """
        A vyos (or derivative) based host.
    """
    string user="inmanta"
    string password="inmanta"
    number port=22
end

implementation vyosConfig for Host:
    self.credential = vyos::Credential(address=self.ip, user=self.user,
                                       password=self.password, port=self.port)
    std::AgentConfig(autostart=true, agentname=name, uri="local:", provides=self)
    self.os = vyos::os
end

implement Host using std::hostDefaults, vyosConfig

Host.credential [1] -- Credential

entity ConfigNode:
    string node_name
end

ConfigNode.host [1] -- Host
ConfigNode.config [0:1] -- ConfigItem

entity Masquerade extends ConfigNode:
    string outbound_interface
    string source_address
    number rule
end

index Masquerade(host, rule)

implement Masquerade using masq

implementation masq for Masquerade:
    self.node_name = "nat source rule {{ rule }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=std::template("vyos/masq.j2"), requires=self.host.requires)
end

entity Interface extends ConfigNode:
    string name
    ip::cidr? address=null
    bool dhcp=false
end

index Interface(host, name)

implementation iface for Interface:
    self.node_name = "interfaces ethernet {{ name }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=std::template("vyos/interface.j2"), requires=self.host.requires)
end

implement Interface using iface

entity DhcpServer extends ConfigNode:
    string name
    ip::cidr subnet
    ip::ip default_router
    ip::ip[] dns_servers
    ip::ip range_start
    ip::ip range_end
end

implementation dhcpServer for DhcpServer:
    self.node_name = "service dhcp-server shared-network-name {{ name }} subnet {{ subnet }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=std::template("vyos/dhcp.j2"), requires=self.host.requires)
end

implement DhcpServer using dhcpServer

entity StaticRoute extends ConfigNode:
    ip::cidr destination
    ip::ip next_hop
    number table=0
end

implementation staticRouteDefault for StaticRoute:
    self.node_name = "protocols static route {{destination}} next-hop {{ next_hop }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=self.node_name, requires=[self.host.requires, self.requires])
end

implement StaticRoute using staticRouteDefault when table == 0

implementation staticRouteTable for StaticRoute:
    self.node_name = "protocols static table {{ table }} route {{destination}} next-hop {{ next_hop }}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=self.node_name, requires=[self.host.requires, self.requires])
end

implement StaticRoute using staticRouteTable when table > 0

entity PolicyRoute extends ConfigNode:
    string name
    number rule
    number table
end

implementation policyRoute for PolicyRoute:
    self.node_name = "policy route {{name}} rule {{rule}} set table {{table}}"
    self.config = vyos::Config(device=self.host.name, node=self.node_name, credential=self.host.credential,
                               config=self.node_name, requires=[self.host.requires, self.requires])
end

implement PolicyRoute using policyRoute
